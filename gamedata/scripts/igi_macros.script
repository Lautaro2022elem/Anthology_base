local trace_assert = igi_helper.trace_assert

local ini_tables = igi_db.ini_tables

function has_macro(str)
	return str:find("%b&&")
end

local Set = igi_utils.Set

local _pattern = "%&(.*%(.*%))%&"
local _pattern_pre_args = "%&.*%("
local _pattern_post_args = "%)%&"

function despace_args(args)
	for k,v in pairs(args) do
		args[k] = v:gsub('%s', '')
	end
	return args
end

function convert_numbers(args)
	for k,v in pairs(args) do
		args[k] = tonumber(v) or v
	end
	return args
end

function parse_args(args)
	return convert_numbers(despace_args(args))
end

Macro = {
    _cls = "Macro"
}

function Macro.ScaleToPlayer(args)
	args = parse_args(args)
	return igi_helper.scale_to_player(unpack(args))
end

function Macro.Random(args)
	args = parse_args(args)
	return igi_random.rand(unpack(args))
end

function Macro.TableValueRandom(args)
	args = parse_args(args)
	local tbl = ini_tables[args[1]]:as_table()
	return igi_utils.random_table_element(tbl)
end

function Macro.TableValueByKey(args)
	trace_assert(args and args[1] and args[2])
	
	args = parse_args(args)
	local tbl = ini_tables[args[1]]
	return tbl[args[2]]
end

function Macro.ChooseOne(args)
	args = parse_args(args)
	return igi_utils.random_table_element(args)
end

local constant_functions = {
	actor_level = igi_helper.get_player_level,
	player_level = igi_helper.get_player_level,
}
function Macro.Constant(args)
	args = parse_args(args)
	return constant_functions[args[1]]()
end

local function get_faction(keyword)
	if keyword == "actor" then
		return db.actor:character_community()
	elseif keyword == 'taskgiver' then
		return mob_trade.GetTalkingNpc():character_community()
	else
		return keyword
	end
end

local evaluate, tokenize
function Macro.Faction(args)
	-- args checker needed
	local args_str = args[1]
	local tokens = tokenize(args_str)
	local factions = evaluate(tokens, 1, #tokens)
	local faction
	if type(factions) == 'table' then
		local _, faction = igi_utils.random_table_element(factions)
		return faction
	else
		return get_faction(factions)
	end
end

local function escape_pattern(text)
    return text:gsub("([^%w])", "%%%1")
end

local function has_macro(str)
	return str:find("%b&&")
end

local function resolve_macro(macro)
	local macro_func = trace_assert(Macro[macro[1]], macro[1])
	return macro_func(macro[2])
end

local function parse_macro(str)
	local typ, args = string.match(str, "(.-)%((.*)%)")
	
	local arg_table = {}
	for arg in args:gmatch("([^,]+)") do
    	local k, v = arg:match("(.*)=(.*)")
    	if k then
    	    arg_table[k] = v
   	 	else
    	    arg_table[#arg_table + 1] = arg
    	end
	end
	
	return {typ, arg_table}
end

local function stringify(shit)
	if type(shit) == "table" then
		return table.concat(shit, ",")
	end
	return tostring(shit)
end

function resolve_all_macros(str, entities)
	if not str then return nil end
    if not has_macro(str) then return str end

	local new_str = str
	for macro_str in str:gmatch(_pattern) do
		local before = escape_pattern(macro_str)
		if has_macro(macro_str) then
			macro_str = resolve_all_macros(macro_str)
		end
		local macro = parse_macro(macro_str)
		local resolved = resolve_macro(macro)
		if not resolved then igi_helper.raise("MacroUnresolvableException", before) end
		new_str = string.gsub(new_str, '%&'..before..'%&', stringify(resolved))
	end
	return new_str
end

----------------BOOLEAN----------------------------------

local blacklist = {
	monolith = true,
	renegade = true,
	greh = true,
	isg = true,
}
local function get_viable_factions()
	local factions = {}
	for _, faction in pairs(game_relations.factions_table) do
		if not blacklist[faction] then
			factions[faction] = true
		end
	end
	return factions
end

local function get_faction(keyword)
	if keyword == "actor" then
		return db.actor:character_community()
	elseif keyword == 'taskgiver' then
		return mob_trade.GetTalkingNpc():character_community()
	else
		return keyword
	end
end

local function convert_to_faction_set(faction)
	if type(faction) == 'string' then
		return {[get_faction(faction)] = true}
	end
	return faction
end

local function get_of_factions(key, faction)
	local is_in = key == "enemy" and game_relations.is_factions_enemies or game_relations.is_factions_friends
	local tbl = {}
	for k_faction in pairs(get_viable_factions()) do
		if is_in(faction, k_faction) then
			tbl[k_faction] = true
		end
	end
	return tbl
end

local function and_func(left, right)
	right = convert_to_faction_set(right)
	left = convert_to_faction_set(left)
    return Set.intersection(left, right)
end

local function or_func(left, right)
	right = convert_to_faction_set(right)
	left = convert_to_faction_set(left)
    return Set.union(left, right)
end

local function not_func(left, right)
	right = convert_to_faction_set(right)
	return Set.difference(get_viable_factions(), right)
end

local function of_func(left, right)
	right = convert_to_faction_set(right)

	local newset = {}
	for faction in pairs(right) do
		for of_faction in pairs(get_of_factions(left, faction)) do
			newset[of_faction] = true
		end
	end
    return newset
end

function tokenize(str)
    local tbl = {}
    str = str:gsub("%(", "%( "):gsub('%)', ' %)')
    for substr in str:gmatch("[^%s]+") do
        tbl[#tbl+1] = substr
    end
    return tbl
end

local function evaluate_no_par(tokens, tstart, tend)
    if tstart > tend then return nil end
    if tstart == tend then return tokens[tstart] end
    local last_and, last_or, last_not, last_of
    for i=tend,tstart,-1 do
        local token = tokens[i]
        if token == "and" then
            last_and = i
        elseif token == "or" then
            last_or = i
        elseif token == "not" then
            last_not = i
        elseif token == "of" then
            last_of = i
        end
    end
    if last_and then
		return and_func(evaluate_no_par(tokens, tstart, last_and-1), evaluate_no_par(tokens, last_and+1, tend))
    elseif last_or then
		return or_func(evaluate_no_par(tokens, tstart, last_or-1), evaluate_no_par(tokens, last_or+1, tend))
    elseif last_not then
		return not_func(evaluate_no_par(tokens, tstart, last_not-1),evaluate_no_par(tokens, last_not+1, tend))
    elseif last_of then
		return of_func(evaluate_no_par(tokens, tstart, last_of-1),evaluate_no_par(tokens, last_of+1, tend))
    end
end

function evaluate(tokens, tstart, tend)
    if tstart > tend then return nil end
    if tstart == tend then return tokens[tstart] end

    local new_tokens = {}
    local par_count = 0
    local par_start
    for i=tstart,tend do
        local token = tokens[i]
        if token == '(' then
            if par_count == 0 then
                par_start = i
            end
            par_count = par_count + 1

        elseif token == ')' then
            par_count = par_count - 1
            if par_count == 0 then
                new_tokens[#new_tokens + 1] = evaluate(tokens, par_start+1, i-1)
            end
        elseif par_count == 0 then
            new_tokens[#new_tokens + 1] = token
        end
    end
    return evaluate_no_par(new_tokens, 1, #new_tokens)
end

-------------------------------------------------------

function resolve_all(tbl, entities)
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			tbl[k] = resolve_all(v, entities)
		elseif type(v) == 'string' and has_macro(v) then
			tbl[k] = resolve_all_macros(v, entities)
		end
	end
	return tbl
end

function resolve_unlinked(tbl)
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			tbl[k] = resolve_unlinked(v)
		elseif type(v) == 'string' and has_macro(v) 
				and not igi_linker.has_dependency(v) then
			tbl[k] = resolve_all_macros(v)
		end
	end
	return tbl
end










