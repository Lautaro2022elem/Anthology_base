-- =============================================================
--	Config reader (igi_db.script)
--	Anomaly 1.5.5.0
--	Igigog
-- =============================================================

TEXT_HEADER = "igi_task_text_"
local database_folder = "igi_tasks\\"

-- ini_tables is under LtxView and is defined as follows:
-- ini_tables = ini_tables = LtxView("tables\\base.ltx")
--------------------------------------------

local trace_assert = igi_helper.trace_assert

function parse_values(str)
	if not str then return nil end
	local values = {}
	for value in string.gmatch(str, "([^,]+)") do
		if value == "true" or value == "false" then
			value = value == "true"
		end
		
		table.insert(values, tonumber(value) or value)
	end
	if #values == 1 then return values[1] end
	return values
end

local function get_table(file, section)
	if not file or not section then return end
	local tbl = {}
	local config = type(file) == "userdata" and file or ini_file(database_folder..file)
	if not (config and config:section_exist(section)) then return end

	for i=0, config:line_count(section) - 1 do
		local _, key = config:r_line(section, i, "", "")
		values_str = config:r_string(section, key)
		if not values_str then
			table.insert(tbl, key)
		else
			local values = parse_values(values_str)
			tbl[key] = values
		end
	end
	return tbl
end

function get_value(file, section, key)
	if not file or not section or not key then return nil end
	
	local ini = type(file) == "userdata" and file or ini_file(database_folder..file)
	if not ini:section_exist(section) then return nil end
	if not ini:line_exist(section, key) then return nil end
	return parse_values(ini:r_string(section, key))
end

-------------------------------------------------------
LtxView = {_cls = "LtxView"}
local LtxView_mt = {}
setmetatable(LtxView, LtxView_mt)

function LtxView_mt:__call(file)
	trace_assert(file, "LtxView: no file")
	local ini = trace_assert(ini_file(database_folder..file), 
		"LtxView: no such file: "..file)
	
	local view = {
		_filename = file,
		_ini = ini,
	}

	
	setmetatable(view, LtxView_mt)
	return view
end

function LtxView_mt:__index(key)
	if rawget(LtxView, key) then return rawget(LtxView, key) end
	local view = SectionView(rawget(self, "_ini"), key)
	self[key] = view
	return view
end

function LtxView:get_sections()
	local sections = {}
	local function add_to_table(section)
		sections[#sections+1] = section
	end
	self._ini:section_for_each(add_to_table)
	return sections
end

function LtxView:iter()
	local sections = self:get_sections()
	local count = #sections

	local current_key = 0
	local function iterator()
		current_key = current_key + 1
		if current_key <= count then
			local section = sections[current_key]
			return section, self[section]
		end
	end
	return iterator
end
ini_tables = LtxView("tables\\base.ltx")
-- Looks like table, behaves like table, but takes keys and values from ini_file
SectionView = {_cls = "SectionView"}
local SectionView_mt = {}
setmetatable(SectionView, SectionView_mt)
SectionView._methods = {}

function SectionView_mt:__call(ini, section)
	trace_assert(ini and section, "SectionView: no file or section")
	
	if type(ini) ~= "userdata" then
		ini = ini_file(database_folder..ini)
	end
	
	if not ini:section_exist(section) then return nil end
	
	local view = {
		_ini = ini,
		_section = section,
		_custom = {},
		_methods = self._methods,
		_line_count = ini:line_count(section),
	}
	setmetatable(view, getmetatable(self))
	return view
end

function SectionView_mt:__index(key)
	if not key then return end
	if self._methods[key] then return self._methods[key] end
	if self._custom[key] then return self._custom[key] end

	local values_str, line_key
	if type(key) == "number" then
		if self._line_count < key then return nil end
		_, line_key, values_str = self._ini:r_line_ex(self._section, key-1)
	else
		if not self._ini:line_exist(self._section, key) then return nil end
		values_str = self._ini:r_string_ex(self._section, key)
	end

	if not values_str then return line_key end
	return parse_values(values_str)
end

function SectionView_mt:__newindex(k, v)
	self._custom[k] = v
end

function SectionView_mt:__len()
	return self._ini:line_count(self._section) + #self._custom
end

function SectionView._methods:as_table()
	-- Lua 5.1 sucks, so you need to use this table for pairs()
	local new_tbl = get_table(self._ini, self._section)
	for k, v in pairs(self._custom) do
		new_tbl[k] = v
	end
	return new_tbl
end

function SectionView._methods:as_set()
	local new_tbl = get_table(self._ini, self._section)
	set = {}
	for _, v in pairs(new_tbl) do
		set[v] = true
	end
	
	for _, v in pairs(self._custom) do
		set[v] = true
	end
	return set
end

function SectionView._methods:random()
	-- Ебал рот для кастомных ключей тоже прописывать
	local line = igi_random.rand(self._line_count) - 1
	local _, key, values_str = self._ini:r_line_ex(self._section, line)
	-- delete newline char
	values_str = string.match(values_str, "^%s*(%S.+)%s*")
	local value = values_str and parse_values(values_str) or key
	return value, key
end
