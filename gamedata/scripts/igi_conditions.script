
local trace_assert = igi_helper.trace_assert

local function print_time(t, title)
	title = title or "time"
	printf("WTF: "..title..": "..t:dateToString(0).." "..t:timeToString(2))
end

local function print_variables(...)
	local str = "WTF: variables: "
	for k, v in pairs({...}) do
		if k > 1 then
			str = str..", "
		end
		str = str..tostring(v)
	end
	printf(str)
end

--[[local function get_daytime_bounds(daytime)
	local bounds = igi_db.SectionView.new("daytime.ltx", "daytime_bounds")
	return bounds[daytime]
end

-----------------<Task conditions>----------------------------
-- Fuck CTime, better luck next time
--[[local function setup_timer(arg)
	local cur_time = game.get_game_time()
	local dt = game.CTime()
	dt:set(
		tonumber(string.match(arg, "(%d+)Y") or 0),
		tonumber(string.match(arg, "(%d+)M") or 0),
		tonumber(string.match(arg, "(%d+)D") or 0),
		tonumber(string.match(arg, "(%d+)h") or 0),
		tonumber(string.match(arg, "(%d+)m") or 0),
		tonumber(string.match(arg, "(%d+)s") or 0),
		tonumber(string.match(arg, "(%d+)ms") or 0)
	)
	local timer = cur_time + dt
	print_time(timer, "timer")
	return {timer:get()}
end]]

--[[local function setup_until(arg)
	local bound, _ = get_daytime_bounds(arg)
	local y, m, d, h = game.get_game_time():get()
	if h > bound then
		d = d + 1
	end
	return {y, m, d, bound, 0, 0, 0}
end]]

--[[function setup_task_conditions(conditions)
	if not conditions then return end
	local condition_setup_funcs = {
		["timer"] = setup_timer,
		["until"] = setup_until,
	}

	local condition_setup = {}
	for condition, func in pairs(condition_setup_funcs) do
		if conditions[condition] then
			condition_setup[condition] = func(conditions[condition])
		end
	end

	return condition_setup
end

local function check_timer(args)
	local y, m, d, h, minute, s, ms = unpack(args)
	local timer = game.CTime()
	timer:set(y, m, d, h, minute, s, ms)
	return game.get_game_time() < timer
end

function is_task_conditions_valid(conditions_setup)
	if not conditions_setup then return true end
	utils_data.print_table(conditions_setup, "conditions")
	local check_funcs = {
		["timer"] = check_timer,
		["until"] = check_timer,
	}

	for k, args in pairs(conditions_setup) do
		printf(tostring(check_funcs[k]))
		if check_funcs[k] and not check_funcs[k](args) then
			return false
		end
	end

	return true
end
	]]
