local trace_assert = igi_helper.trace_assert

function find_generate_key(entity)
    for k in pairs(entity) do
        if k:find("generate:") then
            return k
        end
    end
end

function unfold_one_level(entity)
    local key_to_unfold = find_generate_key(entity)
    if not key_to_unfold then return end

    local new_entities = {}
    local table_key = key_to_unfold:match("generate:(.*)")
    local list = entity[key_to_unfold]
    trace_assert(not igi_text_processor.has_link_or_macro(list),
        "Generation list not resolved before generation", entity)
    entity[key_to_unfold] = nil

    local counter = 0
    local counter_id = table_key.."_gen_id"
    for value in list:gmatch("[^,]+") do
        counter = counter + 1
        local new_entity = dup_table(entity)
        new_entity[table_key] = value
        new_entity[counter_id] = counter

        new_entities[#new_entities+1] = new_entity
    end
    return new_entities
end

function unfold_entity(entity)
    local stack = {entity}
    local final_entities = {}

    while #stack > 0 do
        local entity = stack[#stack]
        stack[#stack] = nil
        local unfolded = unfold_one_level(entity)
        if unfolded then
            for _, v in pairs(unfolded) do
                stack[#stack+1] = v
            end
        else
            final_entities[#final_entities+1] = entity
        end
    end
    return final_entities
end

function unfold_generation(setup)
    local array_list = {}
    for _, entity in pairs(setup) do
        array_list[#array_list+1] = unfold_entity(entity)
    end

    empty_table(setup)
    for _, entities in pairs(array_list) do
        for _, entity in pairs(entities) do
            setup[#setup+1] = entity
            entity.group_id = nil   -- group id will be set once more
        end
    end
end
