local sin = math.sin
local sbyte = string.byte
local floor = math.floor
local random_seed = device():time_global()
local offset
local trace_assert = igi_helper.trace_assert

function on_game_start()
	RegisterScriptCallback("on_game_load", on_game_load)
end

function on_game_load()
	if not load_var(db.actor, "igi_tasks_random") then
		save_var(db.actor, "igi_tasks_random", math.random(1, 65535))
	end
	offset = load_var(db.actor, "igi_tasks_random") / 3709  -- unique for every game
end

function set_seed(seed)
	local sd = 0
	if type(seed) == "string" then
		function a(h)
			sd = sd + sbyte(h)
		end
		seed:gsub(".", a)
		random_seed = sd * offset
	elseif type(seed) == "number" then
		random_seed = seed * offset
	else
		trace_assert(nil, "random: bad seed of type "..type(seed))
	end
end

function rand(b, a)
	local rand_num = (((sin(random_seed)/2+0.5)*10000)%100)/100 -- from SO
	random_seed = rand_num

	if a and b then
		return floor((b-a+.99)*rand_num) + a	-- random integer from a to b
	elseif b then
		return floor((b-.01)*rand_num) + 1		-- random integer from 1 to b
	else
		return rand_num
	end
	
	return 0.5
end
