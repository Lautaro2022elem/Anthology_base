local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local tests = {}

function on_game_start()
	-- crash tf out of here
	RegisterScriptCallback("actor_on_first_update", function()
		if igi_mcm.get_options_value("debug") then
			trace_assert(run_tests(), "Unit tests fucked up")
		end
	end)
end

function add_test(module_name, name, f)
	if not tests[module_name] then tests[module_name] = {} end
	tests[module_name][name] = f
end

function add_test_partial(module_name)
	return function(...)
		add_test(module_name, ...)
	end
end

function run_tests()
	local not_failed = true
	for module_name, module_tests in pairs(tests) do
		for name, test in pairs(module_tests) do
			ok, err = pcall(test)
			if not ok then
				not_failed = false
				trace_dbg("WTF: TEST FAILED IN MODULE "..module_name, name, err) 
			end
			module_tests[name] = nil -- no need to save it anymore
		end
	end
	return not_failed
end

function tables_are_same_one_way(tbl1, tbl2)
	for k,v in pairs(tbl1) do
		if type(v) ~= "table" and tbl2[k] ~= v then
			return false
		elseif type(v) ~= type(tbl2[k]) then
			return false
		elseif type(v) == "table" and not tables_are_same(v, tbl2[k]) then
			return false
		end
	end
	return true
end

function tables_are_same(tbl1, tbl2)
	trace_dbg("unit tests: tables are same", tbl1, tbl2)
	return tables_are_same_one_way(tbl1, tbl2) and tables_are_same_one_way(tbl2, tbl1)
end
