--------------------------------------------------------------------------------
-- Animated rock binder
--------------------------------------------------------------------------------
function bind(obj)
	obj:bind_object(rock_binder(obj))
	db.storage[obj:id()] = {}
end
--------------------------------------------------------------------------------
class "rock_binder" (object_binder)
function rock_binder:__init(obj) super(obj)
	self.stage = 0
	self.is_dead = false
	self.loaded = false
	--self.anim_time = 0
	self.hit_time = 0

	self.idle_snd 	= 	sound_object("monsters\\bloodsucker\\sucker_breath_0")
	self.start_snd 	= 	sound_object("monsters\\bloodsucker\\swamp_growl_1")
	self.stop_snd 	= 	sound_object("monsters\\bloodsucker\\die_0")
	self.hit_snd 	= 	sound_object("monsters\\bloodsucker\\attack_hit_0")
end

function rock_binder:net_spawn(server_object)
	if not(object_binder.net_spawn(self, server_object)) then
		return false
	end
	db.add_anim_obj(self.object, self)
	self.object:get_physics_object():stop_anim()
	self.object:get_physics_object():anim_time_set(0)
	self.object:set_callback(callback.script_animation, self.animation_end_callback, self)
	return true
end

function rock_binder:net_destroy()
	if self.idle_snd then
		self.idle_snd:stop()
	end
	if self.start_snd then
		self.start_snd:stop()
	end
	if self.stop_snd then
		self.stop_snd:stop()
	end
	if self.hit_snd then
		self.hit_snd:stop()
	end
	self.object:set_callback(callback.script_animation, nil)
	db.del_anim_obj(self.object)
	object_binder.net_destroy(self)
end

function rock_binder:update(delta)
	object_binder.update(self, delta)
	if self.loaded then
		self.object:get_physics_object():stop_anim()
		self.object:get_physics_object():anim_time_set(0)
		self.stage = 0
		self.loaded = false
	end
	
	------------------------------------------------------------------------------------- stage #0 : set to wait mode
	if self.stage == 0 then
		self.object:get_physics_object():stop_anim()
		self.object:get_physics_object():anim_time_set(0)
		if self.idle_snd then
			self.idle_snd:stop()
		end
		if self.start_snd then
			self.start_snd:stop()
		end
		--if self.stop_snd then
			--self.stop_snd:stop()
		--end
		if self.hit_snd then
			self.hit_snd:stop()
		end
		self.stage = 1
		return
	end
	
	------------------------------------------------------------------------------------- stage #1 : wait for player (5m)
	if self.stage == 1 then
		if self.object:position():distance_to_sqr(db.actor:position()) < 25.0 then
			self.object:get_physics_object():run_anim_forward()
			self.hit_time = 0
			if self.start_snd then
				self.start_snd:play_at_pos(self.object, self.object:position(), 0, sound_object.s3d)
			end
			if self.idle_snd then
				self.idle_snd:play_at_pos(self.object, self.object:position(), 1, sound_object.s3d + sound_object.looped)
			end
			
			self.object:start_particles("sad\\tornado_grp", "link")
			
			self.stage = 2
		end
		return
	end
	
	------------------------------------------------------------------------------------- stage #2 : action
	if self.stage == 2 then
		local tt = self.object:get_physics_object():anim_time_get()
		if tt > 2.0 then
			tt = 1.0 + (tt - 2.0)
			self.object:get_physics_object():anim_time_set(tt)
		end
		self.object:get_physics_object():run_anim_forward()
		
		local dist = self.object:position():distance_to_sqr(db.actor:position())
		if dist < 18.0 then
			if self.hit_time then
				if self.hit_time < time_global()-dist*100 then
					self.hit_time = time_global()
					local h = hit()
					h.direction = db.actor:position():sub(self.object:position())
					h.draftsman = db.actor
					h.type = hit.shock
					h:bone("bip01_spine")
					h.power = 0.5
					h.impulse = 150
					db.actor:hit(h)
					
					level.add_complex_effector("effector_explode_hit", 787)
					
					if self.hit_snd then
						self.hit_snd:play_at_pos(self.object, self.object:position(), 0, sound_object.s3d)
					end
					
					if dist < 11.0 then -- выбить ружжо
						local active_slot = db.actor:active_slot()
						if active_slot == 2 or active_slot == 3 then
							local active_item = db.actor:active_item()
							if active_item then
								db.actor:drop_item(active_item)
							end
						end
					end
				end
			else
				self.hit_time = 0
			end
		end
		
		if self.object:position():distance_to_sqr(db.actor:position()) > 100.0 then
			if self.stop_snd then
				local snd_delay = 3.0 - self.object:get_physics_object():anim_time_get()
				self.stop_snd:play_at_pos(self.object, self.object:position(), snd_delay, sound_object.s3d)
			end
			self.stage = 3
		end
		
		return
	end
	
	------------------------------------------------------------------------------------- stage #3 : wait for animation end
	if self.stage == 3 then
		local tt = self.object:get_physics_object():anim_time_get()
		if tt > 3.9 or tt < 1.0 then
			self.object:stop_particles("sad\\tornado_grp", "link")
			self.stage = 0
		end
		return
	end
end

function rock_binder:animation_end_callback(is_end)
	if is_end then
		self.stage = 0
		--self.anim_time = 0
	end
end


-- Standart function for save
function rock_binder:net_save_relevant()
	return true
end
-- Saving
function rock_binder:save(packet)
	set_save_marker(packet, "save", false, "rock_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	--packet:w_u8(self.stage)
	packet:w_bool(self.is_dead)
	--packet:w_float(self.object:get_physics_object():anim_time_get())
	set_save_marker(packet, "save", true, "rock_binder")
end
-- Loading
function rock_binder:load(packet)
	set_save_marker(packet, "load", false, "rock_binder")
	object_binder.load(self, packet)
	xr_logic.load_obj(self.object, packet)
	self.stage = 0 --packet:r_u8()
	self.is_dead = packet:r_bool()
	--self.anim_time = packet:r_float()
	self.loaded = true
	set_save_marker(packet, "load", true, "rock_binder")
end