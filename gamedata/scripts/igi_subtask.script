local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg

TASK_STATUSES = {
	RUNNING = "running",
	COMPLETED = "completed",
	FAILED = "failed",
	READY_TO_FINISH = "ready_to_finish",
	DISABLED = "disabled",
	CANCELLED = "cancelled",
}

function get_subtasks(CACHE)
	return CACHE.subtasks
end

function get_subtask_links_of_status(status, CACHE)
	return get_subtasks(CACHE)[status].payloads
end

function get_subtasks_of_status(status, CACHE)
	local links = get_subtask_links_of_status(status, CACHE)
	local subtasks = {}
	for i, link in ipairs(links) do
		subtasks[i] = igi_linker.get_entity_from_link(link, CACHE)
	end
	return subtasks
end

function get_completed_subtasks(CACHE)
	return get_subtasks_of_status(TASK_STATUSES.COMPLETED, CACHE)
end

function get_running_subtasks(CACHE)
	return get_subtasks_of_status(TASK_STATUSES.RUNNING, CACHE)
end

function get_ready_to_finish_subtasks(CACHE)
	return get_subtasks_of_status(TASK_STATUSES.READY_TO_FINISH, CACHE)
end

function get_failed_subtasks(CACHE)
	return get_subtasks_of_status(TASK_STATUSES.FAILED, CACHE)
end

function iterate_subtasks(CACHE, func, ...)
	for _, subtask in pairs(igi_target.get_entities(CACHE)) do
		if subtask.target then
			func(subtask, ...)
		end
	end
end

local function get_status_by_link(link, CACHE)
	local subtask = igi_linker.get_entity_from_link(link, CACHE)
	local target_tbl = igi_taskdata.get_target_table(subtask.target)
	return target_tbl.get_status(subtask)
end

local function update_subtasks_of_status(status, CACHE, new_statuses)
	local subtasks_heap = get_subtasks(CACHE)[status]
	for i=#subtasks_heap.payloads, 1, -1 do
		local link = subtasks_heap.payloads[i]
		local new_status = get_status_by_link(link, CACHE)

		if new_status and new_status ~= status then
			new_statuses[new_status] = new_statuses[new_status] or {}
			new_statuses[new_status][#new_statuses[new_status]+1] = link
			igi_utils.heap_remove_by_index(subtasks_heap, i)
		end
	end
end

function is_task_failed(CACHE)
	for _, subtask in ipairs(get_failed_subtasks(CACHE)) do
		if not subtask.optional then return true end
	end
	return false
end

local function has_no_running_subtasks(CACHE)
	return #get_subtask_links_of_status(TASK_STATUSES.RUNNING, CACHE) == 0
end

local function has_ready_to_finish_subtasks(CACHE)
	return #get_subtask_links_of_status(TASK_STATUSES.READY_TO_FINISH, CACHE) == 0
end

function is_task_completed(CACHE)
	return has_no_running_subtasks(CACHE)
end

function must_return_to_task_giver(CACHE)
	return has_ready_to_finish_subtasks(CACHE)
end

function update_subtask_status_by_link(link, new_status, CACHE)
	local subtasks = get_subtasks(CACHE)
	local subtask = igi_linker.get_entity_from_link(link, CACHE)
	local old_status = subtask.status
	-- call all callbacks; new status may be changed by callbacks
	subtask.status = new_status
	local target_tbl = igi_taskdata.get_target_table(subtask.target)
	if target_tbl["on_"..new_status] then target_tbl["on_"..new_status](subtask, CACHE) end
	igi_callbacks.invoke_callbacks("on_subtask_status_change", CACHE, subtask, new_status)

	if subtask.status ~= old_status then
		igi_utils.heap_remove_element(subtasks[old_status], link)
		igi_utils.heap_push(subtasks[subtask.status], link, subtask.order)
	end
end

function change_subtasks_status(CACHE, old_status, new_status)
	local links = get_subtask_links_of_status(old_status, CACHE)
	for _, link in pairs(links) do
		update_subtask_status_by_link(link, new_status, CACHE)
	end
end

function process_subtasks(CACHE)
	local new_statuses = {}
	update_subtasks_of_status(TASK_STATUSES.RUNNING, CACHE, new_statuses)
	update_subtasks_of_status(TASK_STATUSES.READY_TO_FINISH, CACHE, new_statuses)

	for status, links in pairs(new_statuses) do
		for _, link in pairs(links) do
			update_subtask_status_by_link(link, status, CACHE)
		end
	end
end

---------------------------------------------------
function quest_target(CACHE)
	for _, subtask in ipairs(get_running_subtasks(CACHE)) do
		local target_tbl = igi_taskdata.get_target_table(subtask.target)
		local target = target_tbl.quest_target(subtask, CACHE)
		if target then return target end
	end
end

function set_current_map_target(CACHE, is_last_stage)
	if is_last_stage then
		CACHE.current_target_id = CACHE.task_giver_id
	else
		CACHE.current_target_id = quest_target(CACHE)
	end
end

function get_current_target_id(CACHE)
	return CACHE.current_target_id
end
---------------------------------------------------

local function create_subtasks_table()
	local subtasks = {}
	for _, status in pairs(TASK_STATUSES) do
		subtasks[status] = igi_utils.heap_new()
	end
	return subtasks
end

function setup_subtasks(CACHE)
	local targets = igi_target.get_entities(CACHE)
	trace_dbg("Setup subtasks: entities", targets)

	local subtasks = create_subtasks_table()
	for id, entity in pairs(targets) do
		if entity.target then
			igi_utils.heap_push(
				subtasks[entity.status],
				id,
				entity.order
			)
		end
	end

	CACHE.subtasks = subtasks
end
