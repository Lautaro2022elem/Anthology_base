-- Additional exports from modded exes: https://github.com/themrdemonized/STALKER-Anomaly-modded-exes
--[[
    
    console commands: {
        snd_doppler_power [0; 5] // Adjust power of doppler effect
        snd_doppler_smoothing [1; 100] // Adjust smoothness of pitch shifting in doppler effect

        crash_save [0; 1] // Enable saving game on game crash
        crash_save_count [0; 20] // Crash saves max number

        pseudogiant_can_damage_objects_on_stomp [0; 1] // Enable the ability for pseudogiants to damage objects on stomp
        
        sds_enable [0; 1] // Enable shader based scopes
        sds_speed_enable [0; 1] // Enable mouse sensitivity change on zooming
        sds_zoom_enable [0; 1] // Enable correction of max. zoom with scope_factor, if this option is enabled then max. zoom will be such as prescribed in settings regardless of scope_factor value, if this option is disabled then max. zoom will be sum of value prescribed in settings and the increase that gives scope_factor.
        new_zoom_enable [0; 1] // Enable alternative zoom control. Minimal zoom is equal to either mechanical zoom or the one prescribed in section min_scope_zoom_factor. The step of zoom adjustment is more precise. 
        zoom_step_count [1.0, 10.0] // Adjust the step of zoom if new_zoom_enable is on

        demo_record_blocked_input 1 // Start demo_record without move or stop. The console and Esc key are available
        demo_record_stop // Stop all launched `demo_record` commands 
        demo_set_cam_direction [head, pitch, roll] // Set the direction the camera is facing and its roll. The parameters are in RADIANS, beware

        first_person_death // Enable First Person Death Camera
        first_person_death_direction_offset // FPD Camera Direction Offset (in DEGREES)
        first_person_death_position_offset // FPD Camera Position Offset (x, y, z)
        first_person_death_position_smoothing // FPD Camera Position Change Smoothing
        first_person_death_direction_smoothing // FPD Camera Direction Change Smoothing
    }

    namespace level {
        float get_music_volume()
        void set_music_volume(float)
    }

    class Fvector {
        function distance_to_xz_sqr(Fvector)
    }

    class wallmarks_manager {
        wallmarks_manager()
        function place (Fvector dir, Fvector start_pos, float trace_dist, float wallmark_size, string section, game_object ignore_obj, float ttl)
        function place (Fvector dir, Fvector start_pos, float trace_dist, float wallmark_size, string section, game_object ignore_obj, float ttl, bool random_rotation)
        function place_skeleton (game_object obj, string section, Fvector start, Fvector dir, float size, float ttl)
    }

    class game_object {
        // Skeletons
        function bone_direction(string bone_name, bool bHud = false)

        // Player
        function get_actor_walk_accel()
        function set_actor_walk_accel(float)
        function get_actor_walk_back_coef()
        function set_actor_walk_back_coef(float)
    }

    class CWeapon : CGameObject {
        // Return RPM in actual RPM value like in configs
        function RealRPM()
        function ModeRealRPM()

        // Setters
        function SetFireDispersion(float)
        function SetMisfireStartCondition(float)
        function SetMisfireEndCondition(float)
        function SetRPM(float)
        function SetRealRPM(float)
        function SetModeRPM(float)
        function SetModeRealRPM(float)
        function Set_PDM_Base(float)
        function Set_Silencer_PDM_Base(float)
        function Set_Scope_PDM_Base(float)
        function Set_Launcher_PDM_Base(float)
        function Set_PDM_BuckShot(float)
        function Set_PDM_Vel_F(float)
        function Set_Silencer_PDM_Vel(float)
        function Set_Scope_PDM_Vel(float)
        function Set_Launcher_PDM_Vel(float)
        function Set_PDM_Accel_F(float)
        function Set_Silencer_PDM_Accel(float)
        function Set_Scope_PDM_Accel(float)
        function Set_Launcher_PDM_Accel(float)
        function Set_PDM_Crouch(float)
        function Set_PDM_Crouch_NA(float)
        function SetCrosshairInertion(float)
        function Set_Silencer_CrosshairInertion(float)
        function Set_Scope_CrosshairInertion(float)
        function Set_Launcher_CrosshairInertion(float)
        function SetFirstBulletDisp(float)
        function SetHitPower(float)
        function SetHitPowerCritical(float)
        function SetHitImpulse(float)
        function SetFireDistance(float)

        // Cam Recoil
        // Getters
        function GetCamRelaxSpeed()
        function GetCamRelaxSpeed_AI()
        function GetCamDispersion()
        function GetCamDispersionInc()
        function GetCamDispersionFrac()
        function GetCamMaxAngleVert()
        function GetCamMaxAngleHorz()
        function GetCamStepAngleHorz()
        function GetZoomCamRelaxSpeed()
        function GetZoomCamRelaxSpeed_AI()
        function GetZoomCamDispersion()
        function GetZoomCamDispersionInc()
        function GetZoomCamDispersionFrac()
        function GetZoomCamMaxAngleVert()
        function GetZoomCamMaxAngleHorz()
        function GetZoomCamStepAngleHorz()

        // Setters
        function SetCamRelaxSpeed(float)
        function SetCamRelaxSpeed_AI(float)
        function SetCamDispersion(float)
        function SetCamDispersionInc(float)
        function SetCamDispersionFrac(float)
        function SetCamMaxAngleVert(float)
        function SetCamMaxAngleHorz(float)
        function SetCamStepAngleHorz(float)
        function SetZoomCamRelaxSpeed(float)
        function SetZoomCamRelaxSpeed_AI(float)
        function SetZoomCamDispersion(float)
        function SetZoomCamDispersionInc(float)
        function SetZoomCamDispersionFrac(float)
        function SetZoomCamMaxAngleVert(float)
        function SetZoomCamMaxAngleHorz(float)
        function SetZoomCamStepAngleHorz(float)
    }

    enum rq_target { (sum them up to target multiple types)
        rqtNone     = 0,
        rqtObject   = 1,
        rqtStatic   = 2,
        rqtShape    = 4,
        rqtObstacle = 8,
    }

    class ray_pick {
        ray_pick()
        ray_pick(Fvector position, Fvector direction, float range, rq_target flags, game_object obj)
        function set_position(Fvector)
        function set_direction(Fvector)
        function set_range(float)
        function set_flags(rq_target)
        function set_ignore_object(game_object)
        function query()
        function get_result() : rq_result
        function get_object() : game_object
        function get_distance() : float
        function get_element() : int (number of triangle)
    }

    class rq_result {
        const object
        const range
        const element
        const material_name
        const material_flags
        const material_phfriction
        const material_phdamping
        const material_phspring
        const material_phbounce_start_velocity
        const material_phbouncing
        const material_flotation_factor
        const material_shoot_factor
        const material_shoot_factor_mp
        const material_bounce_damage_factor
        const material_injurious_speed
        const material_vis_transparency_factor
        const material_snd_occlusion_factor
        const material_density_factor
    }

    // Available flags, not exported from engine, copy this and implement lshift function in your script
    material_flags = {
        ["flBreakable"]         = lshift(1, 0),
        ["flBounceable"]        = lshift(1, 2),
        ["flSkidmark"]          = lshift(1, 3),
        ["flBloodmark"]         = lshift(1, 4),
        ["flClimable"]          = lshift(1, 5),
        ["flPassable"]          = lshift(1, 7),
        ["flDynamic"]           = lshift(1, 8),
        ["flLiquid"]            = lshift(1, 9),
        ["flSuppressShadows"]   = lshift(1, 10),
        ["flSuppressWallmarks"] = lshift(1, 11),
        ["flActorObstacle"]     = lshift(1, 12),
        ["flNoRicoshet"]        = lshift(1, 13),
        ["flInjurious"]         = lshift(1, 28),
        ["flShootable"]         = lshift(1, 29),
        ["flTransparent"]       = lshift(1, 30),
        ["flSlowDown"]          = lshift(1, 31),
    }
    

--]]