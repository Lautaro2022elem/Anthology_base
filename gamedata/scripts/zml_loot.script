--[[
------------------------------------------------------------
-- Survival Mode Remade - Extra items from stash boxes
------------------------------------------------------------
-- MCM-configurable script to give the player a chance to get some extra items whenever they open a stash box.
-- by dph-hcl
------------------------------------------------------------
]]--
-- link the droptables.ltx to this script to load the droptables
ini_droptables = ini_file("scripts\\zml_droptables.ltx")

-- debug function
function print_debug(...)
	if zml_amain_mcm.get_config("zml_debug_enabled") then
		printf(...)
	end
end

--[[TEMP DROPTABLES]]--
-- BASIC AMMO
local basic_ammo = {
    "ammo_11.43x23_fmj",
    "ammo_12x70_buck",
    "ammo_7.62x25_p",
    "ammo_12x76_zhekan",
    "ammo_5.45x39_fmj",
    "ammo_5.45x39_ep",
    "ammo_5.56x45_fmj",
    "ammo_5.56x45_ss190",
    "ammo_9x18_fmj",
    "ammo_9x19_fmj",
    "ammo_11.43x23_hydro",
    "ammo_12x76_dart",
    "ammo_7.62x25_ps",
    "ammo_5.45x39_ap",
    "ammo_5.56x45_ap",
    "ammo_9x18_ap",
    "ammo_9x18_pmm",
    "ammo_9x19_ap",
    "ammo_9x19_pbp",
}

-- ADVANCED AMMO
local advanced_ammo = {
    "ammo_357_hp_mag",
    "ammo_7.62x39_fmj",
    "ammo_7.62x51_fmj",
    "ammo_7.62x54_7h1",
    "ammo_9x39_pab9",
    "ammo_7.62x39_ap",
    "ammo_7.62x51_ap",
    "ammo_7.62x54_7h14",
    "ammo_7.62x54_ap",
    "ammo_9x39_ap",
}

-- EXOTIC AMMO
local exotic_ammo = {
    "ammo_12.7x55_fmj",
    "ammo_4.6x30_fmj",
    "ammo_5.7x28_ss195",
    "ammo_7.92x33_fmj",
    "ammo_m209",
    "ammo_vog-25",
    "ammo_12.7x55_ap",
    "ammo_5.7x28_ss190",
    "ammo_50_bmg",
    "ammo_7.92x33_ap",
    "ammo_magnum_300",
    "ammo_pkm_100",
    "ammo_gauss",
}
--[[END TEMP DROPTABLES]]--

-- table of already looted boxes
local boxes = {}
-- table of already looted npcs
local npcs = {}

local pda_msg_status = true

-- send messages to PDA when opening a stash with found items of mentionned categories
local function pda_message(type)
    local strs = {
        ["repair"] = "st_zml_loot_found_repair",
        ["ammo"] = "st_zml_loot_found_ammo",
        ["meds"] = "st_zml_loot_found_meds",
        ["mags"] = "st_zml_loot_found_mags",
        ["lootbox"] = "st_zml_loot_found_lootbox",
        ["tool"] = "st_zml_loot_found_tool",
        ["container"] = "st_zml_loot_found_container",
        ["drug"] = "st_zml_loot_found_drug",
        ["food"] = "st_zml_loot_found_food",
        ["drink"] = "st_zml_loot_found_drink",
        ["device"] = "st_zml_loot_found_device",
        --[[ WIP for per faction
        --["potion"] = "st_zml_loot_found_potion",
        ["faction"] = "st_zml_loot_found_faction",
        ["faction_army"] = "st_zml_loot_found_faction_army",
        ["faction_bandit"] = "st_zml_loot_found_faction_bandit",
        ["faction_csky"] = "st_zml_loot_found_faction_csky",
        ["faction_dolg"] = "st_zml_loot_found_faction_dolg",
        ["faction_ecolog"] = "st_zml_loot_found_faction_ecolog",
        ["faction_freedom"] = "st_zml_loot_found_faction_freedom",
        ["faction_greh"] = "st_zml_loot_found_faction_greh",
        ["faction_killer"] = "st_zml_loot_found_faction_killer",
        ["faction_isg"] = "st_zml_loot_found_faction_isg",
        ["faction_monolith"] = "st_zml_loot_found_faction_monolith",
        ["faction_stalker"] = "st_zml_loot_found_faction_stalker",
        ]]--
    }
    if (not zml_loot_mcm.get_config("send_message")) or (not pda_msg_status) then
        return
    end
	db.actor:give_game_news(game.translate_string(strs[type]), "", "ui_inGame2_Polucheni_koordinaty_taynika", 0, 3000)
    -- zml_debug.get_log().info("loot/general", "PDA message sent: %s", strs[type])
	xr_sound.set_sound_play(AC_ID, "pda_tips")
end

--[[
-- (OLD) picks an item from a droptables
local function roll_item_tiered(t, box)
    if t==nil then
        print_debug("t=nil error")
    end
    local r = math.random(1,100)
    --sort tbl for rarer (higher numbers) droptables get on top
    table.sort(t, function(a, b) return a[1] > b[1] end)
    for i, n in ipairs(t) do
        if (r >= n[1]) then
            local itm = n[2][math.random(#n[2])]
            create_item_random_uses(itm, box)
            return true
        end
    end
    return false
end
]]--

-- creates an item with a random amount of uses or condition
local function create_item_random_uses(i, box)
    print_debug("# Starting create_item_random_uses with "..tostring(i))
    -- zml_debug.get_log().info("loot/general", "Creating item with random uses: %s", i)
    local max_uses = ini_sys:r_float_ex(i, "max_uses")
    local se_item = alife_create_item(i, box)
    local name_k = ini_sys:r_string_ex(se_item:section_name(), "inv_name")
    local name = name_k and game.translate_string(name_k)
    print_debug("Spawned "..name.." ID "..se_item.id)
    if max_uses then
        alife_process_item(i, se_item.id, {uses = (math.random(1, max_uses))})
    elseif utils_item.is_degradable(nil, se_item.id) then
        alife_process_item(i, se_item.id, {cond = (math.random(50,100)/100)})
    end
end

-- rolls to spawn compatible magazines for weapons in slots
function try_spawn_mag(box)
    if math.random(1,100) <= zml_zzintegration_mcm.get_config("mags_redux_chance") then
        -- zml_debug.get_log().info("integration", "Rolling for magazine")
        local mags = {}
        for i=1,3 do
            local wpn = db.actor:item_in_slot(i)
            if wpn and magazine_binder.is_supported_weapon(wpn) then
                mags = magazine_binder.get_mags_for_basetype(magazine_binder.get_weapon_base_type(wpn))
            end
        end
        if (next(mags) == nil) then
            return
        end
        pda_message("mags")
        alife_create_item(mags[math.random(#mags)], box)
    end
end

-- rolls for ammo, and spawns if sucessful
function try_spawn_ammo(box)
    if math.random(1,100) <= zml_loot_mcm.get_config("ammo_chance") then
        pda_message("ammo")
        local r = math.random(1,100)
        if r > 90 then create_ammo(exotic_ammo[math.random(#exotic_ammo)], box)
        elseif r > 60 then create_ammo(advanced_ammo[math.random(#advanced_ammo)], box)
        else create_ammo(basic_ammo[math.random(#basic_ammo)], box)end
    end
end

--[[
-- TEST TO HANDLE AMOUNT (works)
-- rolls for a potion item, and spawns if sucessful
function try_spawn_potion(box)
    if math.random(1,100) <= zml_loot_mcm.get_config("potion_chance") then
        pda_message("potion")
        local tbl = {
            { 50, potion_tier2},
            { 0, potion_tier1},
        }
        local a = zml_loot_mcm.get_config("potion_amount")
        if a > 1 then
            for i=1,a do
                roll_item_tiered(tbl, box)
            end
        else
            roll_item_tiered(tbl, box)
        end
    end
end
]]--

-- rng agains spawn_chance of given category
-- also checks if given category is from integration
function try_spawn_category(box, category)
    print_debug("# Starting try_spawn category with "..tostring(category))
    local surestring = tostring(category)
    local stringcompare = "zz"
    local rand = math.random(1,100)
    print_debug("rand ="..rand)
    if string.starts(surestring, stringcompare) then
        print_debug(surestring.." starts with "..stringcompare)
        if rand <= zml_zzintegration_mcm.get_config(surestring.."_chance") then
            spawn_category(box, surestring)
        end
    else
        print_debug(surestring.." doesn't starts with "..stringcompare)
        if rand <= zml_loot_mcm.get_config(surestring.."_chance") then
            spawn_category(box, surestring)
        end
    end
end

-- if need to compare starting string characters
function string.starts(String,Start)
    return string.sub(String,1,string.len(Start))==Start
end

-- faction try_spawn_category function variant
function try_spawn_faction(box, faction)
    print_debug("# Starting try_spawn_faction with "..tostring(faction))
    local surestring = tostring(faction)
    local stringcompare = "zz"
    local rand = math.random(1,100)
    print_debug("rand ="..rand)
    if string.starts(surestring, stringcompare) then
        print_debug(surestring.." starts with "..stringcompare)
        if rand <= zml_zzintegration_mcm.get_config("faction_chance") then
            spawn_category(box, surestring)
        end
    else
        print_debug(surestring.." doesn't starts with "..stringcompare)
        if rand <= zml_loot_mcm.get_config("faction_chance") then
            spawn_category(box, surestring)
        end
    end
end

-- spawn an item with given category
function spawn_category(box, category)
    print_debug("# Starting spawn_category with "..category)
    local tbl = loot_table(tostring(category))
    local is_one = false
    --VVV check if received table is bigger than 1 VVV
    if #tbl == 1 then
        is_one = true
    end
    print_debug("is_one="..tostring(is_one))
    roll_item_tiered(tbl, box, is_one)
end

-- get the droptable
function loot_table(category)
    print_debug("# Starting loot_table")
    local t = {}
    local num = 0
    local loottable = roll_droptable_tier(category)
    print_debug("loottable="..loottable)
    if not ini_droptables:section_exist(loottable) then
        printf("! ZML : "..loottable.." doesn't exist, aborting by placing bandit_patch instead!")
        table.insert(t, 1, "bandit_patch")
        return t
    end
    num = ini_droptables:line_count(loottable)
    print_debug("num set to="..tostring(num))
    local junk, variable, value = "", "", ""
    --VVV in case the droptable only has 1 item VVV
    if num == 1 then
        print_debug("using num=1 mode")
        junk , variable, value = ini_droptables:r_line(loottable, 0, "", "")
        print_debug("variable="..variable)
        table.insert(t, 1, variable)
        print_debug("t[1]="..t[1])
    else
        print_debug("using num>1 mode")
        for i=1, num do
            print_debug("i="..i)
            junk , variable, value = ini_droptables:r_line(loottable, (i-1), "", "")
            print_debug("variable="..variable)
            table.insert(t, i, variable)
            print_debug("t["..i.."]="..t[i])
        end
    end
    return t
end

-- spawn without any table shenanigans
function roll_item_tiered(t, box, is_one)
    print_debug("# Starting to roll_item_tiered")
    if t==nil then
        print_debug("t=nil error")
        return
    end
    local itm = ""
    if is_one then
        print_debug("is_one=true, using 1")
        itm = t[1]
    else
        local rand = math.random(#t)
        print_debug("is_one=false, using rand="..rand)
        itm = t[rand]
    end
    if itm == nil then
        printf("! ZML : itm is nil!")
        return
    end
    print_debug("Sending "..itm.." to create_item_random_uses")
    create_item_random_uses(itm, box)
end

-- get a droptable name by giving the category/faction
-- generating a random number between 1 and 100
-- and checking for each tier thresholds of said category/faction
-- it picks the first it fits in obviously
function roll_droptable_tier(category)
    print_debug("# Starting roll_droptable_tier")
    local genstring = tostring(category).."_tier"
    local r = math.random(1,100)
    if not ini_droptables:section_exist(genstring.."1") then
        printf("! ZML : "..genstring.."1 doesn't exist, aborting roll_droptable_tier!")
        return genstring.."1"
    end
    print_debug("t1="..zml_tier_mcm.get_config(genstring.."1"))
    print_debug("t2="..zml_tier_mcm.get_config(genstring.."2"))
    print_debug("t3="..zml_tier_mcm.get_config(genstring.."3"))
    print_debug("t4="..zml_tier_mcm.get_config(genstring.."4"))
    if r >= zml_tier_mcm.get_config(genstring.."4") then
        return tostring(category).."_tier4"
    elseif r >= zml_tier_mcm.get_config(genstring.."3") and r < zml_tier_mcm.get_config(genstring.."4") then
        return tostring(category).."_tier3"
    elseif r >= zml_tier_mcm.get_config(genstring.."2") and r < zml_tier_mcm.get_config(genstring.."3") then
        return tostring(category).."_tier2"
    else
        return tostring(category).."_tier1"
    end
end

-- creates a random amount of ammo in a box
function create_ammo(i, box)
    local se_item
    if zml_loot_mcm.get_config("ammo_bad_spawn") and (math.random(1,100) <= zml_loot_mcm.get_config("ammo_bad_chance"))
    then se_item = alife_create_item(i .. "_bad", box)
    else se_item = alife_create_item(i, box) end
    local bs = ini_sys:r_float_ex(i, "box_size") or 10
    local r = math.ceil(math.random(bs/2, bs*2) * zml_loot_mcm.get_config("ammo_amount"))
    alife_process_item(i, se_item.id, {ammo = r})
end

-- try to spawn loot
function try_spawn(box, ishuman)
    -- FACTION
    if ishuman then
        print_debug("is human")
        --if zml_loot_mcm.get_config("faction_spawn") then zml_loot.try_spawn_faction(box,box:character_community()) end
        if zml_loot_mcm.get_config("faction_spawn") then zml_loot.try_spawn_faction(box, tostring(box:character_community())) end
    else
        print_debug("is not human")
        if check_box_id(box) then
            print_debug("is faction stash")
            if zml_loot_mcm.get_config("faction_spawn") then zml_loot.try_spawn_faction(box,"army") end
        else
            print_debug("is not faction stash")
        end
    end
    -- BASIC
    if zml_loot_mcm.get_config("repair_spawn") then zml_loot.try_spawn_category(box, "repair") end
    if zml_loot_mcm.get_config("meds_spawn") then zml_loot.try_spawn_category(box, "meds") end
    if zml_loot_mcm.get_config("drug_spawn") then zml_loot.try_spawn_category(box, "drug") end
    if zml_loot_mcm.get_config("food_spawn") then zml_loot.try_spawn_category(box, "food") end
    if zml_loot_mcm.get_config("drink_spawn") then zml_loot.try_spawn_category(box, "drink") end
    if zml_loot_mcm.get_config("tool_spawn") then zml_loot.try_spawn_category(box, "tool") end
    if zml_loot_mcm.get_config("device_spawn") then zml_loot.try_spawn_category(box, "device") end
    if zml_loot_mcm.get_config("container_spawn") then zml_loot.try_spawn_category(box, "container") end
    -- ZZINTEGRATION
    if zml_zzintegration_mcm.get_config("zzlootbox_spawn") and arti_lootboxes_mcm then zml_loot.try_spawn_category(box, "zzlootbox") end
    -- TO REWORK > different system
    if zml_zzintegration_mcm.get_config("mags_redux") and magazines then zml_loot.try_spawn_mag(box, "mags") end
    if zml_loot_mcm.get_config("ammo_spawn") then zml_loot.try_spawn_ammo(box) end
    print_debug("--done--")
end

-- test for faction-specific stash > it requires the stash ID kek
function check_box_id(box)
    if box:id() == 15666 then -- test with the stash in the barracks, military checkpoint, sout of Cordon
        return true
    else
        return false
    end
end

-- ---
-- ENTRY POINTS
-- ---

-- callback, used to write box table to save
local function save_state(data)
    if not (data.zml_loot) then
		data.zml_loot = {}
	end
    data.zml_loot.npcs = npcs
    data.zml_loot.boxes = boxes
end

-- callback, used to load box table from save
local function load_state(data)
    if not (data.zml_loot) then
		return
	end
    boxes = data.zml_loot.boxes or {}
    data.zml_loot.boxes = {}
    npcs = data.zml_loot.npcs or {}
    data.zml_loot.npcs = {}
end

-- called when a box/stash is opened by the player
local function physic_object_on_use_callback(box)
        local id = box:id()
    if zml_amain_mcm.get_config("zml_debug_enabled") then
        local section = box:section()
        print_debug("--CONTAINER--")
        print_debug("ID "..id)
        print_debug("Section "..section)
        print_debug("-------------")
    end
    local player_stashes = alife_storage_manager.get_state().player_created_stashes
    if (id and boxes and boxes[id]) or (player_stashes and player_stashes[id]) then
        return
    end
    if (IsInvbox(box)) then
        if math.random(1,100) <= zml_loot_mcm.get_config("stash_chance") then
            print_debug("callback stash rand <="..tostring(zml_loot_mcm.get_config("stash_chance")).." so loot spawn!")
            try_spawn(box, false)
        else
            print_debug("callback stash rand >"..tostring(zml_loot_mcm.get_config("stash_chance")).." so no loot.")
        end
        boxes[id] = true
	end
end

-- called when a NPC dies
local function npc_on_death_callback(obj, who)
    local id = obj:id()
    if zml_amain_mcm.get_config("zml_debug_enabled") then
        local section = obj:section()
        local name = obj:name()
        local fullname = obj:character_name()
        local faction = obj:character_community()
        print_debug("--NPC--")
        print_debug("ID "..id)
        print_debug("Section "..section)
        print_debug("TechName "..name)
        print_debug("FullName "..fullname)
        print_debug("Faction "..faction)
        print_debug("-------")
    end
    if id and npcs and npcs[id] then
        return
    end
    if math.random(1,100) <= zml_loot_mcm.get_config("npc_chance") then
        pda_msg_status = false
        try_spawn(obj, true)
        pda_msg_status = true
        npcs[id] = true
    end
end

-- register callback for box opening
local function actor_on_first_update()
    if zml_amain_mcm.get_config("zml_enabled") then
        printf("# --ZML--")
        printf("# ZCP Loot Module standalone succesfully activated.")
        if zml_loot_mcm.get_config("npc_spawn") then
            RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
            printf("# Additionnal NPC loot activated.")
        end
        if zml_loot_mcm.get_config("stash_spawn") then
            RegisterScriptCallback("physic_object_on_use_callback", physic_object_on_use_callback)
            printf("# Additionnal Stash loot activated.")
        end
        print_debug("# Debug logging activated.")
        printf("# --May the loot be ever in your favor !--")
    end
end

-- register callbacks for saving/loading
function on_game_start()
    if not zml_amain_mcm.get_config("zml_enabled") then
        return
    end
    -- TO ADD SOMEWHERE
    --[[
    if zml_zzintegration_mcm.get_config("glowsticks") and zz_glowstick_mcm then
        table.insert(useful_tier1, "device_glowstick_orange")
        table.insert(useful_tier1, "device_glowstick_red")
        table.insert(useful_tier1, "device_glowstick_blue")
        table.insert(useful_tier1, "device_glowstick")
    end
    ]]--
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    --RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

--[[
-- sample code from discord for faction
local all_factions = {
        ["army"] = "1",
        ["bandit"] = "2",
        ["csky"] = "3",
        ["dolg"] = "4",
        ["ecolog"] = "5",
        ["freedom"] = "6",
        ["greh"] = "7",
        ["killer"] = "8",
        ["isg"] = "9",
        ["monolith"] = "10",
        ["stalker"] = "11",
        ["renegade"] = "12"
    }

faction = enemy:character_community()
local action = type(actions[faction]) == "function" and actions[faction]() or return actions[faction];
]]--